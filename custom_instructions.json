{
  "name": "Full-Stack App Quality Rules",
  "description": "Comprehensive rule set to maintain consistency, safety, and performance across a full-stack Python/React application.",
  "rules": [
    {
      "id": "model-consistency",
      "description": "Ensure model definitions and their usage are consistent throughout the application.",
      "severity": "error",
      "checks": [
        {
          "id": "model-property-completeness",
          "description": "All model properties must be properly defined in both the model class and its constructor.",
          "rules": [
            "Every column defined in the model must be initialized in the constructor",
            "Every property used in to_dict() must be defined as a column or relationship",
            "Default values in column definitions must match constructor defaults",
            "All JSON/JSONB columns must be properly typed and nullable status must be consistent"
          ]
        },
        {
          "id": "model-method-consistency",
          "description": "Model methods must be consistent and not duplicate functionality.",
          "rules": [
            "No duplicate method definitions within the same model",
            "Class methods must use class-level constants, not redefine them",
            "Validation methods must use consistent error handling patterns",
            "Status transition methods must use defined state machines"
          ]
        },
        {
          "id": "model-relationship-integrity",
          "description": "Model relationships must be properly defined and consistent.",
          "rules": [
            "All foreign keys must have corresponding relationship definitions",
            "Backref relationships must be consistent on both sides",
            "Cascade delete rules must be explicitly defined",
            "Relationship loading strategies (lazy/eager) must be consistent"
          ]
        },
        {
          "id": "model-validation-consistency",
          "description": "Model validation must be consistent and comprehensive.",
          "rules": [
            "Required fields must be validated in both constructor and update methods",
            "Enum values must be defined as class constants",
            "Status transitions must be validated against defined state machines",
            "JSON schema validation must be consistent across similar fields"
          ]
        },
        {
          "id": "model-serialization-consistency",
          "description": "Model serialization must be consistent and complete.",
          "rules": [
            "to_dict() method must include all relevant fields",
            "DateTime fields must be properly formatted in serialization",
            "JSON fields must be properly handled in serialization",
            "Relationship data must be consistently included/excluded"
          ]
        }
      ],
      "examples": {
        "good": [
          "class User(db.Model):\n    id = db.Column(db.String(36), primary_key=True)\n    email = db.Column(db.String(255), nullable=False)\n    \n    def __init__(self, email):\n        self.id = str(uuid.uuid4())\n        self.email = email",
          "class Campaign(db.Model):\n    VALID_STATUSES = ['created', 'running', 'completed']\n    \n    def update_status(self, new_status):\n        if new_status not in self.VALID_STATUSES:\n            raise ValueError('Invalid status')"
        ],
        "bad": [
          "class User(db.Model):\n    id = db.Column(db.String(36), primary_key=True)\n    \n    def __init__(self, email):\n        self.email = email  # Missing id initialization",
          "class Campaign(db.Model):\n    def update_status(self, new_status):\n        valid_statuses = ['created', 'running']  # Redefined instead of using class constant"
        ]
      }
    }
  ],
  "robust_code_suggestions": {
    "description": "Guidelines for making robust code suggestions in Flask and similar projects.",
    "rules": [
      "Always recommend solutions that are robust across all contexts, not just those that work in a specific or narrow scenario.",
      "Avoid suggesting patterns that rely on runtime context (like current_app or request) for decorators or initialization code. Instead, use importable, shared instances for things like extensions (e.g., Flask-Limiter, Flask-CORS).",
      "Favor best practices and idiomatic usage for the framework and ecosystem. For Flask, this means initializing extensions in a way that allows them to be imported and used in blueprints, decorators, and modules without requiring the app context.",
      "Anticipate edge cases: Consider how the code will behave during app startup, testing, blueprint registration, and in multi-threaded or multi-process environments.",
      "If a quick fix is possible but not robust, always note its limitations and recommend the best-practice solution as the primary approach.",
      "Test or reason through the lifecycle of the code: Will it work during import, at runtime, and in all environments (dev, prod, test)?",
      "If unsure, default to the most widely accepted, maintainable, and future-proof approachâ€”even if it requires a bit more refactoring."
    ]
  }
} 