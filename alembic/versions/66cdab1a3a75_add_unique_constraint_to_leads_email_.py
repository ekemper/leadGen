"""add unique constraint to leads email field

Revision ID: 66cdab1a3a75
Revises: 2a500d56a800
Create Date: 2025-05-31 17:32:48.910642

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '66cdab1a3a75'
down_revision: Union[str, None] = '2a500d56a800'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, remove duplicate emails (keeping the first occurrence based on created_at)
    # This SQL finds all leads with duplicate emails and deletes the later ones
    op.execute("""
        DELETE FROM leads 
        WHERE id NOT IN (
            SELECT DISTINCT ON (email) id 
            FROM leads 
            WHERE email IS NOT NULL 
            ORDER BY email, created_at ASC
        ) 
        AND email IS NOT NULL
    """)
    
    # Now create the unique constraint
    op.create_index('idx_leads_email_unique', 'leads', ['email'], unique=True, postgresql_where='email IS NOT NULL')
    op.create_index(op.f('ix_leads_email'), 'leads', ['email'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_leads_email'), table_name='leads')
    op.drop_index('idx_leads_email_unique', table_name='leads', postgresql_where='email IS NOT NULL')
    # ### end Alembic commands ###
