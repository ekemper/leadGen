version: '3.8'
services:
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.backend
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "flask --app server.app:create_app db upgrade"
    restart: "no"
    healthcheck:
      test: ["CMD", "true"]
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    env_file: .env
    environment:
      - FLASK_DEBUG=1
      - FLASK_ENV=development
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    ports:
      - "5001:5001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./server:/app/server
      - ./config:/app/config
      - ./scripts:/app/scripts
      - ./migrations:/app/migrations
      - ./logs:/app/logs
    command: flask --app server.app:create_app run --host=0.0.0.0 --port=5001 --reload

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - USE_APIFY_CLIENT_MOCK=true
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "run_worker.py"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    working_dir: /app
    command: python server/run_worker.py
    volumes:
      - ./logs:/app/logs

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "5173:5173"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: ["npm", "run", "dev", "--", "--host", "--port", "5173"]

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  pgdata: 